MULTI DIMENSIONAL ARRAY
package javaproject;

public class MultiDimensional {
	    public static void main(String[] args) {
	        int[][] array = new int[3][3]; 
	        
	        array[0][0] = 1;
	        array[0][1] = 2;
	        array[0][2] = 3;

	        array[1][0] = 4;
	        array[1][1] = 5;
	        array[1][2] = 6;

	        array[2][0] = 7;
	        array[2][1] = 8;
	        array[2][2] = 9;     
	        for (int i = 0; i < array.length; i++) {
	            for (int j = 0; j < array[i].length; j++) {
	                System.out.print(array[i][j] + " ");
	            }
	            System.out.println(); 
	        }
	    }
	}

ARRAY INSERTION

package datastructure;

public class ArrayInsertion {
	    public static void main(String[] args) {
	        int[] arr = {1, 2, 3, 5, 6}
	        int element = 4;
	        int position = 3;
	        int[] newArr = new int[arr.length + 1];
	        for (int i = 0; i < position; i++) {
	            newArr[i] = arr[i];
	        }
	        newArr[position] = element;
	        for (int i = position; i < arr.length; i++) {
	            newArr[i + 1] = arr[i];
	        }
	        System.out.print("Array after insertion: ");
	        for (int num : newArr) {
	            System.out.print(num + " ");
	        }
	    }
	}

ARRAY DELETION

package datastructure;

import java.util.Scanner;
import java.util.Arrays;

public class arraydeletion {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        System.out.println("Enter the size");
        int size = sc.nextInt();       
        int[] arr = new int[size];
        System.out.println("Enter " + size + " elements:");
        for (int i = 0; i < size; i++) {
            arr[i] = sc.nextInt();
        }
        System.out.println("Original Array: " + Arrays.toString(arr));
        System.out.println("Enter position to delete (1-based index):");
        int delpos = sc.nextInt();
        for (int mypos = delpos - 1; mypos < size - 1; mypos++) {
            arr[mypos] = arr[mypos + 1];
        } 
        size--;         
        int[] newArr = Arrays.copyOf(arr, size);       
        System.out.println("Array after deletion: " + Arrays.toString(newArr));
        sc.close();
    }
}

REVERSE LINKED LIST
package javaproject;

public class ReverseLinkedList {	    
	    static class Node {
	        int data;
	        Node next;
	        public Node(int data) {
	            this.data = data;
	            this.next = null;
	        }
	    }
	    static class LinkedList {
	        Node head;        
	        public Node reverseLinkedList(Node head) {
	            Node prev = null;
	            Node current = head;
	            Node next = null;

	            while (current != null) {
	                next = current.next;  
	                current.next = prev; 
	                prev = current;      
	                current = next;
	            }
	            return prev; 
	        }
	        public void printList(Node head) {
	            Node current = head;
	            while (current != null) {
	                System.out.print(current.data + " -> ");
	                current = current.next;
	            }
	            System.out.println("None");
	        }
	    }

	    public static void main(String[] args) {
	        LinkedList list = new LinkedList();	       
	        list.head = new Node(1);
	        list.head.next = new Node(2);
	        list.head.next.next = new Node(3);
	        list.head.next.next.next = new Node(4);

	        System.out.println("Original Linked List:");
	        list.printList(list.head);
	        list.head = list.reverseLinkedList(list.head);

	        System.out.println("Reversed Linked List:");
	        list.printList(list.head);
	    }
	}







